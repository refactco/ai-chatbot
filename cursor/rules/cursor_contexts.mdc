---
description: 
globs: 
alwaysApply: false
---
# Cursor AI Context Guidelines

This document provides guidelines for effectively providing context to Cursor AI when seeking assistance with the AI Chatbot project.

## Essential Contexts to Provide

When asking Cursor AI for help, include these contexts for optimal results:

1. **Documentation References**
   - Always include relevant documentation files as context
   - For general questions, include `docs/PROJECT-OVERVIEW.md`
   - For component-specific questions, include `docs/COMPONENT-ARCHITECTURE.md`
   - For in-depth technical details, include `docs/COMPREHENSIVE-GUIDE.md`
   - For artifact system, include `docs/ARTIFACT-SYSTEM.md`
   - For version control features, include `docs/VERSION-CONTROL-SYSTEM.md`

2. **Related Code Files**
   - Include the primary file you're working with
   - Include directly related component files
   - Include relevant utility or service files
   - For complex features, include parent components that use your component

3. **Type Definitions**
   - Always include `lib/ai/types.ts` when working with message-related code
   - Include interface definitions relevant to your task
   - Include `lib/schema.ts` when working with document-related features

## File Documentation Requirements

When creating new files or modifying existing ones, remember to include these documentation elements:

1. **File Description Comment Block**:
   ```tsx
   /**
    * Component/File Name
    *
    * Brief description of purpose and functionality.
    * Features:
    * - Key feature 1
    * - Key feature 2
    * - Key feature 3
    *
    * Any important notes or caveats.
    */
   ```

2. **Inline Documentation**:
   - Add explanatory comments for complex code sections
   - Use JSDoc for functions: `/** @param name - description */`
   - Comment major variables with their purpose

3. **Component Section Comments**:
   ```tsx
   {/* Section name or purpose */}
   <div className="...">
     ...
   </div>
   ```

When requesting help with file creation or editing, mention that these documentation requirements must be included in the implementation.

## Context Templates

Use these templates for different types of requests:

### Feature Implementation

```
I need help implementing [feature description].

Contexts:
- docs/PROJECT-OVERVIEW.md (for project understanding)
- docs/COMPONENT-ARCHITECTURE.md (for component relationships)
- [relevant specific guide] (API-INTEGRATION.md, ARTIFACT-SYSTEM.md, etc.)
- [primary component file you're modifying]
- [related component files]
- lib/ai/types.ts (for type definitions)

Remember to include the required documentation elements in any new or modified files.
```

### Bug Fixing

```
I'm encountering a bug where [bug description].

Contexts:
- [file with the bug]
- [related component files]
- lib/ai/types.ts (if message-related)
- docs/COMPREHENSIVE-GUIDE.md (for technical details)
- [any error logs or specific behavior observed]
```

### Code Understanding

```
I need to understand how [feature/component] works.

Contexts:
- [main component file]
- [parent component files]
- [child component files]
- docs/COMPONENT-ARCHITECTURE.md
- docs/COMPREHENSIVE-GUIDE.md (relevant sections)
```

## Component-Specific Contexts

For specific areas of the application, include these contexts:

### Message System

```
- components/message.tsx
- components/messages.tsx
- lib/ai/types.ts
- docs/COMPONENT-ARCHITECTURE.md (Message Components section)
```

### Chat Interface

```
- components/chat.tsx
- components/multimodal-input.tsx
- lib/ai/react.ts
- docs/COMPONENT-ARCHITECTURE.md (Chat Component section)
```

### API Integration

```
- lib/services/mock-api-service.ts 
- lib/services/api-service.ts
- lib/ai/providers.ts
- docs/API-INTEGRATION.md
- docs/MOCK-SERVICES.md
```

### Artifact System

```
- components/artifact.tsx
- components/artifact-messages.tsx
- components/artifact-actions.tsx
- components/version-footer.tsx
- artifacts/text/client.tsx (or relevant artifact type)
- hooks/use-artifact.ts
- docs/ARTIFACT-SYSTEM.md
- docs/VERSION-CONTROL-SYSTEM.md
```

### Version Control

```
- components/artifact.tsx
- components/version-footer.tsx
- components/artifact-actions.tsx
- lib/schema.ts
- docs/VERSION-CONTROL-SYSTEM.md
```

### Storage Implementation

```
- components/artifact.tsx (handleContentChange and related functions)
- lib/services/api-service.ts
- lib/schema.ts
- docs/ARTIFACT-SYSTEM.md (Storage Systems section)
```

## Best Practices for Providing Context

1. **Be Specific and Concise**
   - Provide only relevant context files
   - Highlight specific areas you need help with
   - Describe your understanding of the current code

2. **Include Implementation Details**
   - Mention current state management approach
   - Note any specific TypeScript types in use
   - Reference similar implementations if they exist
   - Specify which storage backend is relevant (API or localStorage)

3. **Specify Constraints**
   - Mention dependencies that cannot be changed
   - Note performance requirements
   - Highlight backward compatibility needs
   - Specify mobile vs. desktop considerations

4. **For Complex Changes**
   - Include both high-level documentation and specific code files
   - Mention related components that might be affected
   - Provide step-by-step breakdown of the planned changes
   - Include version control implications for artifact modifications

## When Working with Artifact Features

When implementing or debugging artifact-related features:

1. **Storage Context**
   - Specify which storage backend is being used (API or localStorage)
   - Include the document ID format and any special prefixes
   - Note local storage keys for document version inspection

2. **Version Control Context**
   - Provide version navigation requirements
   - Specify how version restoration should work
   - Include information about edit/diff mode requirements
   - Note timestamp-based ordering considerations

3. **UI Requirements**
   - Clarify mobile vs. desktop layout needs
   - Specify animation and transition details
   - Include responsive design considerations

## When To Update Comprehensive Guide

After making significant changes or learning new details about the project, update `docs/COMPREHENSIVE-GUIDE.md` with:

1. Implementation details discovered
2. New architectural patterns established
3. Performance optimizations implemented
4. Edge cases and their handling
5. API integration specifics
6. Storage implementation details
7. Version control edge cases and solutions

This ensures that the guide remains a living document that accurately reflects the current state and understanding of the project.

---
description: 
globs: 
alwaysApply: true
---
# Cursor AI Context Guidelines

This document provides guidelines for effectively providing context to Cursor AI when seeking assistance with the AI Chatbot project.

## Essential Contexts to Provide

When asking Cursor AI for help, include these contexts for optimal results:

1. **Documentation References**

   - Always include relevant documentation files as context
   - For general questions, include `docs/PROJECT-OVERVIEW.md`
   - For component-specific questions, include `docs/COMPONENT-ARCHITECTURE.md`
   - For development workflows, include `docs/DEVELOPER-GUIDE.md`
   - For artifact system, include `docs/ARTIFACT-SYSTEM.md`
   - For version control features, include `docs/VERSION-CONTROL-SYSTEM.md`
   - For API implementation, include `docs/MOCK-API-INTEGRATION.md` or `docs/REAL-API-INTEGRATION.md`

2. **Related Code Files**

   - Include the primary file you're working with
   - Include directly related component files
   - Include relevant utility or service files
   - For complex features, include parent components that use your component

3. **Type Definitions**
   - Always include `lib/ai/types.ts` when working with message-related code
   - Include interface definitions relevant to your task
   - Include `lib/schema.ts` when working with document-related features

## File Documentation Requirements

When creating new files or modifying existing ones, remember to include these documentation elements:

1. **File Description Comment Block**:

   ```tsx
   /**
    * Component/File Name
    *
    * Brief description of purpose and functionality.
    * Features:
    * - Key feature 1
    * - Key feature 2
    * - Key feature 3
    *
    * Any important notes or caveats.
    */
   ```

2. **Inline Documentation**:

   - Add explanatory comments for complex code sections
   - Use JSDoc for functions: `/** @param name - description */`
   - Comment major variables with their purpose

3. **Component Section Comments**:
   ```tsx
   {
     /* Section name or purpose */
   }
   <div className="...">...</div>;
   ```

When requesting help with file creation or editing, mention that these documentation requirements must be included in the implementation.

## Context Templates

Use these templates for different types of requests:

### Feature Implementation

```
I need help implementing [feature description].

Contexts:
- docs/PROJECT-OVERVIEW.md (for project understanding)
- docs/COMPONENT-ARCHITECTURE.md (for component relationships)
- docs/DEVELOPER-GUIDE.md (for development patterns)
- [relevant specific guide] (ARTIFACT-SYSTEM.md, VERSION-CONTROL-SYSTEM.md, etc.)
- [primary component file you're modifying]
- [related component files]
- lib/ai/types.ts (for type definitions)

Remember to include the required documentation elements in any new or modified files.
```

### Bug Fixing

```
I'm encountering a bug where [bug description].

Contexts:
- [file with the bug]
- [related component files]
- hooks/use-artifact.ts (if artifact-related)
- lib/ai/types.ts (if message-related)
- docs/DEVELOPER-GUIDE.md (for implementation patterns)
- [any error logs or specific behavior observed]
```

### Code Understanding

```
I need to understand how [feature/component] works.

Contexts:
- [main component file]
- [parent component files]
- [child component files]
- [related hook files]
- docs/COMPONENT-ARCHITECTURE.md
- [relevant specific guide] (ARTIFACT-SYSTEM.md, VERSION-CONTROL-SYSTEM.md, etc.)
```

## Component-Specific Contexts

For specific areas of the application, include these contexts:

### Message System

```
- components/message.tsx
- components/messages.tsx
- components/data-stream-handler.tsx (if working with streaming)
- lib/ai/types.ts
- docs/COMPONENT-ARCHITECTURE.md (Message Components section)
```

### Chat Interface

```
- components/chat.tsx
- components/multimodal-input.tsx
- components/data-stream-handler.tsx
- lib/ai/react.ts
- docs/COMPONENT-ARCHITECTURE.md (Chat Component section)
```

### API Integration

```
- lib/services/mock-api-service.ts
- lib/services/api-service.ts
- lib/ai/providers.ts
- docs/MOCK-API-INTEGRATION.md
- docs/REAL-API-INTEGRATION.md
```

### Artifact System

```
- components/artifact.tsx
- components/artifact-messages.tsx
- components/artifact-actions.tsx
- components/version-footer.tsx
- artifacts/text/client.tsx (or relevant artifact type)
- hooks/use-artifact.ts
- docs/ARTIFACT-SYSTEM.md
- docs/VERSION-CONTROL-SYSTEM.md
```

### Version Control

```
- components/artifact.tsx
- components/version-footer.tsx
- components/artifact-actions.tsx
- hooks/use-artifact.ts
- lib/schema.ts
- docs/VERSION-CONTROL-SYSTEM.md
```

### Storage Implementation

```
- components/artifact.tsx (handleContentChange and related functions)
- lib/services/api-service.ts
- lib/schema.ts
- hooks/use-artifact.ts
- docs/ARTIFACT-SYSTEM.md (Storage Systems section)
```

### Custom Hooks

```
- hooks/use-artifact.ts
- hooks/use-chat-visibility.ts
- hooks/use-mobile.tsx
- components that use the hooks
- docs/COMPONENT-ARCHITECTURE.md (Custom Hooks section)
```

### SWR Implementation

```
- components/artifact.tsx (SWR usage examples)
- hooks/use-artifact.ts (SWR for state management)
- docs/DEVELOPER-GUIDE.md (Using SWR for Data Fetching section)
```

## Best Practices for Providing Context

1. **Be Specific and Concise**

   - Provide only relevant context files
   - Highlight specific areas you need help with
   - Describe your understanding of the current code

2. **Include Implementation Details**

   - Mention current state management approach (SWR, hooks, etc.)
   - Note any specific TypeScript types in use
   - Reference similar implementations if they exist
   - Specify which storage backend is relevant (API or localStorage)
   - Include custom hook usage if applicable

3. **Specify Constraints**

   - Mention dependencies that cannot be changed
   - Note performance requirements
   - Highlight backward compatibility needs
   - Specify mobile vs. desktop considerations

4. **For Complex Changes**
   - Include both high-level documentation and specific code files
   - Mention related components that might be affected
   - Provide step-by-step breakdown of the planned changes
   - Include version control implications for artifact modifications

## When Working with Artifact Features

When implementing or debugging artifact-related features:

1. **Storage Context**

   - Specify which storage backend is being used (API or localStorage)
   - Include the document ID format and any special prefixes
   - Note local storage keys for document version inspection
   - Include SWR caching considerations

2. **Version Control Context**

   - Provide version navigation requirements
   - Specify how version restoration should work
   - Include information about edit/diff mode requirements
   - Note timestamp-based ordering considerations
   - Describe debouncing implementation for content saving

3. **UI Requirements**

   - Clarify mobile vs. desktop layout needs
   - Specify animation and transition details
   - Include responsive design considerations
   - Note any Framer Motion animations

4. **State Management**
   - Explain how the useArtifact hook is used
   - Note any SWR integration points
   - Describe selector pattern for optimized rerenders
   - Explain metadata handling if relevant

## When Implementing New Features

When adding new features to the codebase:

1. **Custom Hooks**

   - Follow the pattern in existing hooks
   - Use SWR for global state when appropriate
   - Implement selector pattern for performance
   - Document the hook with clear JSDoc comments

2. **New Artifact Types**

   - Register in `artifactDefinitions` array
   - Implement standard interface with initialize and content functions
   - Handle metadata appropriately
   - Test with both storage backends
   - Support version control integration

3. **UI Components**

   - Follow responsive design patterns
   - Use Framer Motion for animations
   - Implement mobile-friendly interactions
   - Memoize with React.memo for performance
   - Use component section comments

4. **API Integration**
   - Maintain compatibility with both mock and real APIs
   - Use SWR for data fetching and caching
   - Handle streaming responses appropriately
   - Provide proper loading and error states

## Reference Implementations

When seeking guidance on implementation, refer to these examples:

1. **SWR Usage**: See `components/artifact.tsx` and `hooks/use-artifact.ts`
2. **Custom Hooks**: See `hooks/` directory
3. **Version Control**: See `components/version-footer.tsx` and `components/artifact-actions.tsx`
4. **Artifact Types**: See implementations in `artifacts/` directory
5. **Responsive Design**: See mobile adaptations in `components/artifact.tsx`
6. **Debounced Operations**: See content saving in `components/artifact.tsx`

## Best Practice Code Examples

Include these examples when asking for specific implementations:

### SWR for Data Fetching

```tsx
const { data: documents, mutate } = useSWR<Array<Document>>(
  `/api/document?id=${documentId}`,
  fetcher,
);
```

### Custom Hook Implementation

```tsx
export function useArtifactSelector<Selected>(selector: Selector<Selected>) {
  const { data: localArtifact } = useSWR<UIArtifact>('artifact', null, {
    fallbackData: initialArtifactData,
  });

  const selectedValue = useMemo(() => {
    if (!localArtifact) return selector(initialArtifactData);
    return selector(localArtifact);
  }, [localArtifact, selector]);

  return selectedValue;
}
```

### Debounced Content Saving

```tsx
const debouncedHandleContentChange = useDebounceCallback(
  handleContentChange,
  1000, // 1 second debounce time
);

const saveContent = (updatedContent: string, debounce: boolean) => {
  setIsContentDirty(true); // Show saving indicator

  if (debounce) {
    debouncedHandleContentChange(updatedContent);
  } else {
    handleContentChange(updatedContent);
  }
};
```
